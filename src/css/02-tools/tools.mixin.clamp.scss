/*
 |--------------------------------------------------------------------------
 |  Font Size
 |--------------------------------------------------------------------------
 */

@import '../01-settings/settings.breakpoints';
@import '../01-settings/settings.modular-scale';
@import '../02-tools/tools.function.pow';

/*stylelint-disable*/
@mixin clamp($properties: padding, $factor: 1, $important: null) {
  $multi: 1;
  @if type-of($factor) == number {
    @if $factor < 0 {
      $factor: $factor * -1;
      $multi: -1;
    }

    // Set Vars
    $minValue: $bk-spacingMin * $factor;
    $maxValue: $bk-spacingMax * $factor;

    @if ($properties == font-size) {
      $minValue: $bk-baseFontSizePx * $factor;
      $maxValue: $bk-baseFontSizeMaxPx * $factor;

      $minValue: $bk-baseFontSizePx * pow($major-second, $factor);
      $maxValue: $bk-baseFontSizeMaxPx * pow($major-third, $factor);
    }

    $min: map-get($breakpoints, min);
    $max: map-get($breakpoints, max);
    $slope: ($maxValue - $minValue) / ($max - $min);
    $yAxisIntersection: -$min * $slope + $minValue;

    @if $important == '!' {
      $important: !important;
    } @else {
      $important: null;
    }

    @if type-of($properties) == list or type-of($properties) == string {
      @each $property in $properties {
        #{$property}: calc(clamp(#{$minValue}, calc(#{$yAxisIntersection} + #{$slope * 100}vw), #{$maxValue}) * #{$multi}) $important;
      }
    } @else {
      @error "$properties is not passed in correct. Must be a list!";
    }
  } @else {
    @error "$factor  is not passed in correct. Must be a number!";
  }
}
/*stylelint-enable*/
